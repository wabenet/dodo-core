syntax = "proto3";

package com.wabenet.dodo.runtime.v1alpha1;

option go_package = "github.com/wabenet/dodo-core/api/runtime/v1alpha2";

import "google/protobuf/empty.proto";
import "core/v1alpha6/plugin.proto";
import "core/v1alpha6/backdrop.proto";

service Plugin {
  rpc GetPluginInfo(google.protobuf.Empty) returns (com.wabenet.dodo.core.v1alpha6.PluginInfo);
  rpc InitPlugin(google.protobuf.Empty) returns (com.wabenet.dodo.core.v1alpha6.InitPluginResponse);
  rpc ResetPlugin(google.protobuf.Empty) returns (google.protobuf.Empty);

  rpc StreamInput(stream com.wabenet.dodo.core.v1alpha6.StreamInputRequest) returns (google.protobuf.Empty);
  rpc StreamOutput(com.wabenet.dodo.core.v1alpha6.StreamOutputRequest) returns (stream com.wabenet.dodo.core.v1alpha6.OutputData);

  rpc CreateContainer(CreateContainerRequest) returns (CreateContainerResponse);
  rpc DeleteContainer(DeleteContainerRequest) returns (google.protobuf.Empty);
  rpc StartContainer(StartContainerRequest) returns (google.protobuf.Empty);
  rpc StreamContainer(StreamContainerRequest) returns (StreamContainerResponse);
  rpc ResizeContainer(ResizeContainerRequest) returns (google.protobuf.Empty);
  rpc KillContainer(KillContainerRequest) returns (google.protobuf.Empty);

  rpc CreateVolume(CreateVolumeRequest) returns (google.protobuf.Empty);
  rpc DeleteVolume(DeleteVolumeRequest) returns (google.protobuf.Empty);

  rpc WriteFile(WriteFileRequest) returns (google.protobuf.Empty);

  rpc GetImage(GetImageRequest) returns (GetImageResponse);
}

message CreateContainerResponse {
  string container_id = 1;
}

message GetImageRequest {
  string image_spec = 1;
}

message CreateContainerRequest {
  com.wabenet.dodo.core.v1alpha6.Backdrop config = 1;
  bool tty = 2;
  bool stdio = 3;
}

message DeleteContainerRequest {
  string container_id = 1;
}

message StartContainerRequest {
  string container_id = 1;
}

message ResizeContainerRequest {
  string container_id = 1;
  uint32 height = 2;
  uint32 width = 3;
}

message StreamContainerRequest {
  string container_id = 1;
  uint32 height = 2;
  uint32 width = 3;
}

message KillContainerRequest {
  string container_id = 1;
  string signal = 2;
}

message StreamContainerResponse {
  int64 exitCode = 1;
  string message = 2;
}

message CreateVolumeRequest {
  string name = 1;
}

message DeleteVolumeRequest {
  string name = 1;
}

message WriteFileRequest {
  string container_id = 1;
  string file_path = 2;
  string contents = 3;
}

message GetImageResponse {
  string image_id = 1;
}
