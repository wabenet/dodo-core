syntax = "proto3";

package com.wabenet.dodo.runtime.v1alpha2;

option go_package = "github.com/wabenet/dodo-core/api/runtime/v1alpha2;runtime";

import "google/protobuf/empty.proto";
import "plugin/v1alpha1/plugin.proto";

service Plugin {
  rpc GetPluginInfo(google.protobuf.Empty) returns (com.wabenet.dodo.plugin.v1alpha1.PluginInfo);
  rpc InitPlugin(google.protobuf.Empty) returns (com.wabenet.dodo.plugin.v1alpha1.InitPluginResponse);
  rpc ResetPlugin(google.protobuf.Empty) returns (google.protobuf.Empty);

  rpc StreamInput(stream com.wabenet.dodo.plugin.v1alpha1.StreamInputRequest) returns (google.protobuf.Empty);
  rpc StreamOutput(com.wabenet.dodo.plugin.v1alpha1.StreamOutputRequest) returns (stream com.wabenet.dodo.plugin.v1alpha1.OutputData);

  rpc CreateContainer(CreateContainerRequest) returns (CreateContainerResponse);
  rpc DeleteContainer(DeleteContainerRequest) returns (google.protobuf.Empty);
  rpc StartContainer(StartContainerRequest) returns (google.protobuf.Empty);
  rpc StreamContainer(StreamContainerRequest) returns (StreamContainerResponse);
  rpc ResizeContainer(ResizeContainerRequest) returns (google.protobuf.Empty);
  rpc KillContainer(KillContainerRequest) returns (google.protobuf.Empty);

  rpc CreateVolume(CreateVolumeRequest) returns (google.protobuf.Empty);
  rpc DeleteVolume(DeleteVolumeRequest) returns (google.protobuf.Empty);

  rpc WriteFile(WriteFileRequest) returns (google.protobuf.Empty);

  rpc GetImage(GetImageRequest) returns (GetImageResponse);
}

message CreateContainerResponse {
  string container_id = 1;
}

message GetImageRequest {
  string image_spec = 1;
}

message CreateContainerRequest {
  ContainerConfig config = 1;
}

message DeleteContainerRequest {
  string container_id = 1;
}

message StartContainerRequest {
  string container_id = 1;
}

message ResizeContainerRequest {
  string container_id = 1;
  uint32 height = 2;
  uint32 width = 3;
}

message StreamContainerRequest {
  string container_id = 1;
  uint32 height = 2;
  uint32 width = 3;
}

message KillContainerRequest {
  string container_id = 1;
  string signal = 2;
}

message StreamContainerResponse {
  int64 exitCode = 1;
  string message = 2;
}

message CreateVolumeRequest {
  string name = 1;
}

message DeleteVolumeRequest {
  string name = 1;
}

message WriteFileRequest {
  string container_id = 1;
  string file_path = 2;
  string contents = 3;
}

message GetImageResponse {
  string image_id = 1;
}

message ContainerConfig {
  string name = 1;
  string image = 2;

  Process process = 3;
  TerminalConfig terminal = 4;

  repeated EnvironmentVariable environment = 5;
  repeated PortBinding ports = 6;
  repeated Mount mounts = 7;
  repeated string capabilities = 8;
}

message Process {
  string user = 1;
  string working_dir = 2;
  repeated string entrypoint = 3;
  repeated string command = 4;
}

message TerminalConfig {
  bool stdio = 1;
  bool tty = 2;
  int64 consoleHeight = 3;
  int64 consoleWidth = 4;
}

message EnvironmentVariable {
  string key = 1;
  string value = 2;
}

message PortBinding {
  string host_port = 1;
  string container_port = 2;
  string protocol = 3;
  string host_ip = 4;
}

message Mount {
  oneof type {
    BindMount bind = 1;
    VolumeMount volume = 2;
    TmpfsMount tmpfs = 3;
    ImageMount image = 4;
    DeviceMount device = 5;
  }
}

message BindMount {
  string host_path = 1;
  string container_path = 2;
  bool readonly = 3;
}

message VolumeMount {
  string volume_name = 1;
  string container_path = 2;
  string subpath = 3;
  bool readonly = 4;
}

message TmpfsMount {
  string container_path = 1;
  int64 size = 2;
  string mode = 3;
}

message ImageMount {
  string image = 1;
  string container_path = 2;
  string subpath = 3;
  bool readonly = 4;
}

message DeviceMount {
  string cgroup_rule = 1;
  string host_path = 2;
  string container_path = 3;
  string permissions = 4;
}
