// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.2
// source: api/v1alpha2/configuration.proto

package v1alpha2

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListBackdropsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backdrops []*Backdrop `protobuf:"bytes,1,rep,name=backdrops,proto3" json:"backdrops,omitempty"`
}

func (x *ListBackdropsResponse) Reset() {
	*x = ListBackdropsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha2_configuration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBackdropsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBackdropsResponse) ProtoMessage() {}

func (x *ListBackdropsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha2_configuration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBackdropsResponse.ProtoReflect.Descriptor instead.
func (*ListBackdropsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha2_configuration_proto_rawDescGZIP(), []int{0}
}

func (x *ListBackdropsResponse) GetBackdrops() []*Backdrop {
	if x != nil {
		return x.Backdrops
	}
	return nil
}

type GetBackdropRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *GetBackdropRequest) Reset() {
	*x = GetBackdropRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha2_configuration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBackdropRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackdropRequest) ProtoMessage() {}

func (x *GetBackdropRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha2_configuration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackdropRequest.ProtoReflect.Descriptor instead.
func (*GetBackdropRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha2_configuration_proto_rawDescGZIP(), []int{1}
}

func (x *GetBackdropRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

var File_api_v1alpha2_configuration_proto protoreflect.FileDescriptor

var file_api_v1alpha2_configuration_proto_rawDesc = []byte{
	0x0a, 0x20, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x2a, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x64,
	0x6f, 0x64, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x64, 0x72, 0x6f, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x64,
	0x72, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09,
	0x62, 0x61, 0x63, 0x6b, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x6f, 0x64,
	0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x64, 0x72, 0x6f, 0x70, 0x73,
	0x22, 0x2a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x64, 0x72, 0x6f, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x32, 0xce, 0x03, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x12, 0x5f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x36, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x5f,
	0x63, 0x6c, 0x69, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x64, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x3e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x5f, 0x63, 0x6c,
	0x69, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x63, 0x6b, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x2e, 0x64, 0x6f,
	0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x64, 0x72, 0x6f, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x2e, 0x64, 0x6f,
	0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x64, 0x72, 0x6f, 0x70, 0x42, 0x2c, 0x5a,
	0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x64, 0x6f,
	0x2d, 0x63, 0x6c, 0x69, 0x2f, 0x64, 0x6f, 0x64, 0x6f, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_v1alpha2_configuration_proto_rawDescOnce sync.Once
	file_api_v1alpha2_configuration_proto_rawDescData = file_api_v1alpha2_configuration_proto_rawDesc
)

func file_api_v1alpha2_configuration_proto_rawDescGZIP() []byte {
	file_api_v1alpha2_configuration_proto_rawDescOnce.Do(func() {
		file_api_v1alpha2_configuration_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1alpha2_configuration_proto_rawDescData)
	})
	return file_api_v1alpha2_configuration_proto_rawDescData
}

var file_api_v1alpha2_configuration_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_api_v1alpha2_configuration_proto_goTypes = []interface{}{
	(*ListBackdropsResponse)(nil), // 0: com.github.dodo_cli.dodo_core.api.v1alpha2.ListBackdropsResponse
	(*GetBackdropRequest)(nil),    // 1: com.github.dodo_cli.dodo_core.api.v1alpha2.GetBackdropRequest
	(*Backdrop)(nil),              // 2: com.github.dodo_cli.dodo_core.api.v1alpha2.Backdrop
	(*empty.Empty)(nil),           // 3: google.protobuf.Empty
	(*PluginInfo)(nil),            // 4: com.github.dodo_cli.dodo_core.api.v1alpha2.PluginInfo
	(*InitPluginResponse)(nil),    // 5: com.github.dodo_cli.dodo_core.api.v1alpha2.InitPluginResponse
}
var file_api_v1alpha2_configuration_proto_depIdxs = []int32{
	2, // 0: com.github.dodo_cli.dodo_core.api.v1alpha2.ListBackdropsResponse.backdrops:type_name -> com.github.dodo_cli.dodo_core.api.v1alpha2.Backdrop
	3, // 1: com.github.dodo_cli.dodo_core.api.v1alpha2.ConfigurationPlugin.GetPluginInfo:input_type -> google.protobuf.Empty
	3, // 2: com.github.dodo_cli.dodo_core.api.v1alpha2.ConfigurationPlugin.InitPlugin:input_type -> google.protobuf.Empty
	3, // 3: com.github.dodo_cli.dodo_core.api.v1alpha2.ConfigurationPlugin.ListBackdrops:input_type -> google.protobuf.Empty
	1, // 4: com.github.dodo_cli.dodo_core.api.v1alpha2.ConfigurationPlugin.GetBackdrop:input_type -> com.github.dodo_cli.dodo_core.api.v1alpha2.GetBackdropRequest
	4, // 5: com.github.dodo_cli.dodo_core.api.v1alpha2.ConfigurationPlugin.GetPluginInfo:output_type -> com.github.dodo_cli.dodo_core.api.v1alpha2.PluginInfo
	5, // 6: com.github.dodo_cli.dodo_core.api.v1alpha2.ConfigurationPlugin.InitPlugin:output_type -> com.github.dodo_cli.dodo_core.api.v1alpha2.InitPluginResponse
	0, // 7: com.github.dodo_cli.dodo_core.api.v1alpha2.ConfigurationPlugin.ListBackdrops:output_type -> com.github.dodo_cli.dodo_core.api.v1alpha2.ListBackdropsResponse
	2, // 8: com.github.dodo_cli.dodo_core.api.v1alpha2.ConfigurationPlugin.GetBackdrop:output_type -> com.github.dodo_cli.dodo_core.api.v1alpha2.Backdrop
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_api_v1alpha2_configuration_proto_init() }
func file_api_v1alpha2_configuration_proto_init() {
	if File_api_v1alpha2_configuration_proto != nil {
		return
	}
	file_api_v1alpha2_plugin_proto_init()
	file_api_v1alpha2_backdrop_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_v1alpha2_configuration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBackdropsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha2_configuration_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBackdropRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1alpha2_configuration_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1alpha2_configuration_proto_goTypes,
		DependencyIndexes: file_api_v1alpha2_configuration_proto_depIdxs,
		MessageInfos:      file_api_v1alpha2_configuration_proto_msgTypes,
	}.Build()
	File_api_v1alpha2_configuration_proto = out.File
	file_api_v1alpha2_configuration_proto_rawDesc = nil
	file_api_v1alpha2_configuration_proto_goTypes = nil
	file_api_v1alpha2_configuration_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConfigurationPluginClient is the client API for ConfigurationPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigurationPluginClient interface {
	GetPluginInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PluginInfo, error)
	InitPlugin(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InitPluginResponse, error)
	ListBackdrops(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListBackdropsResponse, error)
	GetBackdrop(ctx context.Context, in *GetBackdropRequest, opts ...grpc.CallOption) (*Backdrop, error)
}

type configurationPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigurationPluginClient(cc grpc.ClientConnInterface) ConfigurationPluginClient {
	return &configurationPluginClient{cc}
}

func (c *configurationPluginClient) GetPluginInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PluginInfo, error) {
	out := new(PluginInfo)
	err := c.cc.Invoke(ctx, "/com.github.dodo_cli.dodo_core.api.v1alpha2.ConfigurationPlugin/GetPluginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationPluginClient) InitPlugin(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InitPluginResponse, error) {
	out := new(InitPluginResponse)
	err := c.cc.Invoke(ctx, "/com.github.dodo_cli.dodo_core.api.v1alpha2.ConfigurationPlugin/InitPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationPluginClient) ListBackdrops(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListBackdropsResponse, error) {
	out := new(ListBackdropsResponse)
	err := c.cc.Invoke(ctx, "/com.github.dodo_cli.dodo_core.api.v1alpha2.ConfigurationPlugin/ListBackdrops", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationPluginClient) GetBackdrop(ctx context.Context, in *GetBackdropRequest, opts ...grpc.CallOption) (*Backdrop, error) {
	out := new(Backdrop)
	err := c.cc.Invoke(ctx, "/com.github.dodo_cli.dodo_core.api.v1alpha2.ConfigurationPlugin/GetBackdrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigurationPluginServer is the server API for ConfigurationPlugin service.
type ConfigurationPluginServer interface {
	GetPluginInfo(context.Context, *empty.Empty) (*PluginInfo, error)
	InitPlugin(context.Context, *empty.Empty) (*InitPluginResponse, error)
	ListBackdrops(context.Context, *empty.Empty) (*ListBackdropsResponse, error)
	GetBackdrop(context.Context, *GetBackdropRequest) (*Backdrop, error)
}

// UnimplementedConfigurationPluginServer can be embedded to have forward compatible implementations.
type UnimplementedConfigurationPluginServer struct {
}

func (*UnimplementedConfigurationPluginServer) GetPluginInfo(context.Context, *empty.Empty) (*PluginInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginInfo not implemented")
}
func (*UnimplementedConfigurationPluginServer) InitPlugin(context.Context, *empty.Empty) (*InitPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitPlugin not implemented")
}
func (*UnimplementedConfigurationPluginServer) ListBackdrops(context.Context, *empty.Empty) (*ListBackdropsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackdrops not implemented")
}
func (*UnimplementedConfigurationPluginServer) GetBackdrop(context.Context, *GetBackdropRequest) (*Backdrop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackdrop not implemented")
}

func RegisterConfigurationPluginServer(s *grpc.Server, srv ConfigurationPluginServer) {
	s.RegisterService(&_ConfigurationPlugin_serviceDesc, srv)
}

func _ConfigurationPlugin_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationPluginServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.dodo_cli.dodo_core.api.v1alpha2.ConfigurationPlugin/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationPluginServer).GetPluginInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationPlugin_InitPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationPluginServer).InitPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.dodo_cli.dodo_core.api.v1alpha2.ConfigurationPlugin/InitPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationPluginServer).InitPlugin(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationPlugin_ListBackdrops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationPluginServer).ListBackdrops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.dodo_cli.dodo_core.api.v1alpha2.ConfigurationPlugin/ListBackdrops",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationPluginServer).ListBackdrops(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationPlugin_GetBackdrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackdropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationPluginServer).GetBackdrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.dodo_cli.dodo_core.api.v1alpha2.ConfigurationPlugin/GetBackdrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationPluginServer).GetBackdrop(ctx, req.(*GetBackdropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigurationPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.dodo_cli.dodo_core.api.v1alpha2.ConfigurationPlugin",
	HandlerType: (*ConfigurationPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPluginInfo",
			Handler:    _ConfigurationPlugin_GetPluginInfo_Handler,
		},
		{
			MethodName: "InitPlugin",
			Handler:    _ConfigurationPlugin_InitPlugin_Handler,
		},
		{
			MethodName: "ListBackdrops",
			Handler:    _ConfigurationPlugin_ListBackdrops_Handler,
		},
		{
			MethodName: "GetBackdrop",
			Handler:    _ConfigurationPlugin_GetBackdrop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha2/configuration.proto",
}
